{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"gas/project-creation/base-character-class/","title":"Base Character Class","text":""},{"location":"gas/project-creation/base-character-class/#overview","title":"Overview","text":"<p>This will be base class that will share functionality across the main character and enemy characters.</p>"},{"location":"gas/project-creation/base-character-class/#creating-a-base-class","title":"Creating a base class","text":"<p>To create a class in the editor, go to <code>Tools &gt; New C++ Class...</code> and select the parent class. For this example, we will choose the Character class. You can select <code>Public</code> if you want your header files to be in a <code>Public</code> folder and <code>.cpp</code> files to be in a <code>Private</code> folder. We are going to name the class <code>AuraCharacterBase</code> and create it inside a <code>Character</code> folder.</p> <p>Since this is a base class, we can make the class abstract in the header file, meaning it cannot be dragged into a level. We can also remove the <code>Tick</code> function since tick won't be need on a base class and the <code>SetupPlayerInputComponent</code> function since player input will be setup on the player character class.</p> Public/Character/AuraCharacterBase.h<pre><code>UCLASS(Abstract)\nclass AURA_API AAuraCharacterBase : public ACharacter\n{\n    GENERATED_BODY()\n\npublic:\n    AAuraCharacterBase();\n\nprotected:\n    virtual void BeginPlay() override;\n\n};\n</code></pre> Private/Character/AuraCharacterBase.cpp<pre><code>#include \"Character/AuraCharacterBase.h\"\n\nAAuraCharacterBase::AAuraCharacterBase()\n{\n    PrimaryActorTick.bCanEverTick = false; // tick not needed\n}\n\nvoid AAuraCharacterBase::BeginPlay()\n{\n    Super::BeginPlay();\n\n}\n</code></pre>"},{"location":"gas/project-creation/base-character-class/#create-a-child-class","title":"Create a child class","text":"<p>Find your base class in the Unreal editor file explorer, right click and select <code>Create C++ class derived from AuraCharacterBase</code>. Do this and create a class <code>AuraCharacter</code> and <code>AuraEnemy</code> in the <code>Character</code> folder.</p> <p>You should see that these classes derive from <code>AuraCharacterBase</code>:</p> CharacterEnemy Public/Character/AuraCharacter.h<pre><code>UCLASS()\nclass AURA_API AAuraCharacter : public AAuraCharacterBase\n{\n  GENERATED_BODY()\n\npublic:\n  AAuraCharacter();\n\n};\n</code></pre> Public/Character/AuraEnemy.h<pre><code>UCLASS()\nclass AURA_API AAuraEnemy : public AAuraCharacterBase\n{\n  GENERATED_BODY()\n\npublic:\n  AAuraEnemy();\n\n};\n</code></pre>"},{"location":"gas/project-creation/base-character-class/#adding-a-skeletal-mesh-and-socket-to-the-base-class","title":"Adding a skeletal mesh and socket to the base class","text":""},{"location":"gas/project-creation/base-character-class/#define-the-skeletal-mesh-in-the-header-file","title":"Define the skeletal mesh in the header file","text":"<p>We want both the character and enemy classes to have weapons, so we will add a wepaon socket to the base class:</p> Public/Character/AuraCharacterBase.h<pre><code>protected:\n    virtual void BeginPlay() override;\n\n    UPROPERTY(EditAnywhere, Category = \"Combat\")\n    TObjectPtr&lt;USkeletalMeshComponent&gt; Weapon;\n</code></pre> <p>A note about <code>TObjectPtr</code> and <code>UPROPERTY</code></p> <p><code>TObjectPtr</code> behaves the same as a raw pointer but with some additional features:</p> <ul> <li>Access tracking: We can track how often a pointer is accessed or dereferenced</li> <li>Optional lazy load: An asset can not be loaded until its used</li> </ul> <p><code>UPROPERTY</code> exposes the component to the Unreal Editor under the <code>Combat</code> category and <code>EditAnywhere</code> means it can be edited from anywhere within the Editor.</p>"},{"location":"gas/project-creation/base-character-class/#create-the-skeletal-mesh-in-the-cpp-file","title":"Create the skeletal mesh in the .cpp file","text":"Private/Character/AuraCharacterBase.cpp<pre><code>AAuraCharacterBase::AAuraCharacterBase()\n{\n    PrimaryActorTick.bCanEverTick = false;\n\n    Weapon = CreateDefaultSubobject&lt;USkeletalMeshComponent&gt;(\"Weapon\");\n    Weapon-&gt;SetupAttachment(GetMesh(), FName(\"WeaponHandSocket\"));\n    Weapon-&gt;SetCollisionEnabled(ECollisionEnabled::NoCollision);\n\n}\n</code></pre> <ul> <li>Line 5: Create the Weapon object using a skeletal mesh that will be set in the editor</li> <li>Line 6: Attach the weapon to <code>GetMesh()</code> (function inherited from <code>ACharacter</code> to get the character mesh) at the socket name <code>WeaponHandSocket</code> (doesn't exist on the character mesh yet)</li> <li>Line 7: Disable collision for the weapon</li> </ul> <p>We will create the socket and attach it to the character mesh in the next section.</p>"},{"location":"gas/project-creation/base-character-class/#create-a-blueprint-class","title":"Create a blueprint class","text":"<p>Start by going to the editor and creating a folder <code>Content/Blueprints/Character/Aura</code>. Then right click and select <code>Blueprint Class</code> and search for <code>AuraCharacter</code>. Select it and call it <code>BP_AuraCharacter</code>. This will create an instance of <code>AuraCharacter</code>. Set the character skeletal mesh and relocate, resize, rotate as needed.</p>"},{"location":"gas/project-creation/base-character-class/#create-the-weapon-socket","title":"Create the weapon socket","text":"<p>Open the character skeletal mesh, find the left hand bone, right click and select <code>Add Socket</code>. Make sure to rename the socket to <code>WeaponHandSocket</code>. Right click again and select <code>Add Preview Asset</code> and select your weapon. Then on the right <code>Preview Scene</code> panel select <code>Preview Controller</code> and click <code>Use Specific Animation</code>, then select an animation that holds the weapon. Move and rotate the socket as needed.</p> <p>Go back to the character blueprint and set the weapon skeletal mesh. It should be located in the correct spot with the correct rotation.</p>"},{"location":"gas/project-creation/project-setup/","title":"Project Setup (Aura)","text":""},{"location":"gas/project-creation/project-setup/#overview","title":"Overview","text":"<p>This project follows a Udemy course about building a game called <code>Aura</code>.  <code>Aura</code> will be referenced a lot in file names, Blueprint names, etc.  It is currently built with UE 5.3 and we are using JetBrains Rider as the IDE.</p>"},{"location":"gas/project-creation/project-setup/#editor-preferences","title":"Editor Preferences","text":"<ul> <li>Source Code Editor: Rider UProject</li> <li>Enable Live Coding: False</li> <li>Automatically Compile Newly Added C++ Classes: False</li> <li>Asset Editor Open Location: Main Window</li> </ul>"}]}